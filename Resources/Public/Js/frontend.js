/**
 * ClubData Frontend JavaScript Module
 * Handles category navigation and checkbox interactions for frontend forms
 * 
 * @author Generated by WARP AI Assistant
 * @version 1.0
 */

'use strict';

/**
 * DOM Content Loaded Event Handler
 * Initializes all event listeners when the DOM is ready
 */
document.addEventListener('DOMContentLoaded', function() {
    initializeCategoryNavigation();
    initializeFrontendFormHelpers();
});

/**
 * Initialize Category Navigation Toggle
 * Sets up click handlers for category navigation icons to show/hide navigation menus
 */
function initializeCategoryNavigation() {
    // Find all category navigation icons
    const catNavIcons = document.querySelectorAll('.cat-nav-icon');
    
    catNavIcons.forEach(function(icon) {
        icon.addEventListener('click', function() {
            // Find the corresponding navigation menu
            const catNav = document.querySelector('.cat-nav');
            
            if (catNav) {
                // Toggle visibility of the navigation menu
                const isHidden = catNav.style.display === 'none' || 
                               window.getComputedStyle(catNav).display === 'none';
                
                catNav.style.display = isHidden ? 'block' : 'none';
                
                // Toggle icon classes for visual feedback (up/down arrow)
                if (icon.classList.contains('down')) {
                    icon.classList.remove('down');
                    icon.classList.add('up');
                } else {
                    icon.classList.remove('up');
                    icon.classList.add('down');
                }
            }
        });
    });
}

/**
 * Initialize Frontend Form Helper Event Listeners
 * Automatically attaches event listeners to checkboxes with frontend naming convention
 */
function initializeFrontendFormHelpers() {
    // Initialize checkbox helpers for frontend (tx_clubdata_listhelpers[psu][])
    initializeFrontendCheckboxHelpers();
    
    console.log('Frontend form helpers initialized successfully');
}

/**
 * Initialize checkbox event listeners for frontend helper functionality
 * Finds all checkboxes with names containing 'tx_clubdata_listhelpers[psu][]' and attaches click handlers
 */
function initializeFrontendCheckboxHelpers() {
    // Find all checkboxes that are part of the frontend helper system
    const helperCheckboxes = document.querySelectorAll(
        'input[type="checkbox"][name*="tx_clubdata_listhelpers[psu]"]:not([data-helper-initialized])'
    );
    
    helperCheckboxes.forEach(function(checkbox) {
        checkbox.addEventListener('click', function() {
            frontendHelperClick(this);
        });
        // Mark as initialized to prevent duplicate listeners
        checkbox.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Initialized ${helperCheckboxes.length} frontend helper checkboxes`);
}

/**
 * Handle checkbox interactions for frontend form elements
 * Manages checkbox state changes and automatically triggers form submission
 * 
 * @param {HTMLInputElement} element - The checkbox element that was clicked
 */
function frontendHelperClick(element) {
    if (!element || element.type !== 'checkbox') {
        console.warn('frontendHelperClick: Invalid element provided');
        return;
    }
    
    if (element.checked) {
        // Checkbox is checked - no additional action needed
        console.log('Frontend checkbox checked:', element.name);
    } else {
        // Checkbox is unchecked - create hidden input for deletion tracking
        const elementName = element.name;
        
        // Create hidden input to track the unchecked state
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = elementName;
        hiddenInput.value = element.value + '-d'; // -d suffix indicates deletion
        
        // Insert the hidden input after the checkbox
        element.parentNode.insertBefore(hiddenInput, element.nextSibling);
    }
    
    // Modify the checkbox value to indicate it was changed
    element.value = element.value + '-c'; // -c suffix indicates changed
    
    // Trigger form submission by clicking the save button
    const saveButton = document.getElementById('save');
    if (saveButton) {
        showLoadingOverlay();
        saveButton.click();
    } else {
        console.warn('Save button not found - form not submitted automatically');
    }
}

/**
 * Reinitialize Frontend Form Helpers for Dynamic Content
 * Call this function after loading content via AJAX or DOM manipulation
 * 
 * @param {Element} container - Optional container element to search within
 */
function reinitializeFrontendFormHelpers(container = document) {
    // Initialize helpers within the specified container
    const helperCheckboxes = container.querySelectorAll(
        'input[type="checkbox"][name*="tx_clubdata_listhelpers[psu]"]:not([data-helper-initialized])'
    );
    
    helperCheckboxes.forEach(function(checkbox) {
        checkbox.addEventListener('click', function() {
            frontendHelperClick(this);
        });
        checkbox.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Reinitialized ${helperCheckboxes.length} frontend checkboxes`);
}

/**
 * Show loading overlay to prevent multiple clicks during form submission
 */
function showLoadingOverlay() {
    // Check if overlay already exists
    if (document.getElementById('clubdata-loading-overlay')) {
        return;
    }
    
    // Create overlay element
    const overlay = document.createElement('div');
    overlay.id = 'clubdata-loading-overlay';
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: wait;
    `;
    
    // Create loading message
    const loadingMessage = document.createElement('div');
    loadingMessage.style.cssText = `
        background-color: white;
        padding: 20px 40px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        font-size: 16px;
        font-weight: bold;
        color: #333;
    `;
    loadingMessage.textContent = 'Speichere Ã„nderungen...';
    
    overlay.appendChild(loadingMessage);
    document.body.appendChild(overlay);
    
    console.log('Loading overlay shown');
    
    // Auto-hide overlay after 10 seconds as fallback
    setTimeout(hideLoadingOverlay, 10000);
}

/**
 * Hide loading overlay
 */
function hideLoadingOverlay() {
    const overlay = document.getElementById('clubdata-loading-overlay');
    if (overlay) {
        overlay.remove();
        console.log('Loading overlay hidden');
    }
}

/**
 * Utility function to safely query elements
 * Provides error handling for DOM queries
 * 
 * @param {string} selector - CSS selector string
 * @param {Element} context - Optional context element (default: document)
 * @returns {NodeList|null} - Found elements or null if error
 */
function safeQuerySelector(selector, context = document) {
    try {
        return context.querySelectorAll(selector);
    } catch (error) {
        console.error('Invalid selector:', selector, error);
        return null;
    }
}

// Hide overlay when page loads (in case of page refresh/redirect after form submission)
window.addEventListener('load', function() {
    hideLoadingOverlay();
});

// Also hide overlay if page becomes visible again (e.g., browser tab switch)
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        hideLoadingOverlay();
    }
});

// Export functions for potential module usage (if needed in the future)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        frontendHelperClick,
        initializeCategoryNavigation,
        initializeFrontendFormHelpers,
        initializeFrontendCheckboxHelpers,
        reinitializeFrontendFormHelpers,
        showLoadingOverlay,
        hideLoadingOverlay
    };
}
