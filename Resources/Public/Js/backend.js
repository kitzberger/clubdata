/**
 * ClubData Backend JavaScript Module
 * Handles select dropdown interactions and printing functionality for backend forms
 * 
 * @author Generated by WARP AI Assistant
 * @version 1.0
 */

'use strict';

/**
 * DOM Content Loaded Event Handler
 * Initializes all event listeners when the DOM is ready
 */
document.addEventListener('DOMContentLoaded', function() {
    initializeBackendFormHelpers();
});

/**
 * Initialize Backend Form Helper Event Listeners
 * Automatically attaches event listeners to select elements with backend naming convention
 */
function initializeBackendFormHelpers() {
    // Initialize select helpers for backend (psu[])
    initializeBackendSelectHelpers();
    
    console.log('Backend form helpers initialized successfully');
}

/**
 * Initialize select element event listeners for backend helper functionality
 * Finds all select elements with names containing 'psu[]' and attaches change handlers
 */
function initializeBackendSelectHelpers() {
    // Find all select elements that are part of the backend helper system
    const helperSelects = document.querySelectorAll(
        'select[name*="psu"]:not([data-helper-initialized])'
    );
    
    helperSelects.forEach(function(select) {
        select.addEventListener('change', function() {
            backendHelperSelect(this);
        });
        // Mark as initialized to prevent duplicate listeners
        select.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Initialized ${helperSelects.length} backend helper select elements`);
}

/**
 * Handle select dropdown interactions for backend
 * Manages dropdown value changes and modifies options dynamically
 * 
 * @param {HTMLSelectElement} element - The select element that was changed
 */
function backendHelperSelect(element) {
    if (!element || element.tagName !== 'SELECT') {
        console.warn('backendHelperSelect: Invalid select element provided');
        return;
    }
    
    // Get the currently selected option
    const selectedOption = element.options[element.selectedIndex];
    const selectedText = selectedOption ? selectedOption.textContent : '';
    
    let newValue;
    
    if (element.value !== '') {
        // Option has a value - append change indicator
        newValue = element.value + '-c'; // -c suffix indicates changed
    } else {
        // Option has no value - use class name with deletion indicator
        const elementClass = element.className;
        newValue = elementClass + '-d'; // -d suffix indicates deletion
    }
    
    // Remove the currently selected option
    if (selectedOption) {
        selectedOption.remove();
    }
    
    // Create new option with modified value and prepend it to the select
    const newOption = document.createElement('option');
    newOption.value = newValue;
    newOption.textContent = selectedText;
    newOption.selected = true;
    
    // Insert the new option at the beginning of the select
    element.insertBefore(newOption, element.firstChild);
    
    console.log('Backend select option modified:', {
        originalValue: element.value,
        newValue: newValue,
        text: selectedText
    });
    
    // Auto-submit form after selection change
    autoSubmitForm();
}

/**
 * Auto-submit form after helper selection changes
 * Looks for the save button and clicks it to submit the form
 */
function autoSubmitForm() {
    const saveButton = document.getElementById('save');
    if (saveButton) {
        // Small delay to ensure DOM updates are complete
        setTimeout(function() {
            showLoadingOverlay();
            saveButton.click();
        }, 100);
    } else {
        console.warn('Save button not found - form not submitted automatically');
    }
}

/**
 * Print functionality for frame-based layouts
 * Focuses and prints a specific frame (legacy functionality for older TYPO3 backends)
 * 
 * @param {string} frameId - The identifier of the frame to print (currently unused)
 */
function beprint(frameId) {
    try {
        // Check if we're in a frame-based environment
        if (parent && parent.frames && parent.frames.list_frame) {
            // Focus the target frame (required for Internet Explorer compatibility)
            parent.frames.list_frame.focus();
            
            // Print the focused frame
            parent.frames.list_frame.print();
            
            console.log('Print command sent to list_frame');
        } else {
            // Fallback: print the current window if frames are not available
            window.print();
            console.log('Frames not available, printing current window');
        }
    } catch (error) {
        console.error('Print operation failed:', error);
        // Final fallback
        window.print();
    }
}

/**
 * Reinitialize Backend Form Helpers for Dynamic Content
 * Call this function after loading content via AJAX or DOM manipulation
 * 
 * @param {Element} container - Optional container element to search within
 */
function reinitializeBackendFormHelpers(container = document) {
    // Initialize helpers within the specified container
    const helperSelects = container.querySelectorAll(
        'select[name*="psu"]:not([data-helper-initialized])'
    );
    
    helperSelects.forEach(function(select) {
        select.addEventListener('change', function() {
            backendHelperSelect(this);
        });
        select.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Reinitialized ${helperSelects.length} backend selects`);
}

/**
 * Show loading overlay to prevent multiple clicks during form submission
 */
function showLoadingOverlay() {
    // Check if overlay already exists
    if (document.getElementById('clubdata-loading-overlay')) {
        return;
    }
    
    // Find the main table to overlay specifically
    const table = document.querySelector('.tx-clubdata-mod table, .table');
    const targetElement = table || document.body;
    
    // Create overlay element
    const overlay = document.createElement('div');
    overlay.id = 'clubdata-loading-overlay';
    
    if (table) {
        // Position relative to table for backend
        const tableRect = table.getBoundingClientRect();
        overlay.style.cssText = `
            position: absolute;
            top: ${tableRect.top + window.scrollY}px;
            left: ${tableRect.left + window.scrollX}px;
            width: ${tableRect.width}px;
            height: ${tableRect.height}px;
            background-color: rgba(255, 255, 255, 0.8);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: wait;
            border: 1px solid #ddd;
        `;
    } else {
        // Fallback to full screen overlay
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: wait;
        `;
    }
    
    // Create loading message
    const loadingMessage = document.createElement('div');
    loadingMessage.style.cssText = `
        background-color: #f8f9fa;
        padding: 15px 30px;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        font-size: 14px;
        font-weight: bold;
        color: #495057;
        border: 1px solid #dee2e6;
    `;
    loadingMessage.innerHTML = '<i class="fa fa-spinner fa-spin" style="margin-right: 8px;"></i>Speichere Ã„nderungen...';
    
    overlay.appendChild(loadingMessage);
    document.body.appendChild(overlay);
    
    console.log('Backend loading overlay shown');
    
    // Auto-hide overlay after 10 seconds as fallback
    setTimeout(hideLoadingOverlay, 10000);
}

/**
 * Hide loading overlay
 */
function hideLoadingOverlay() {
    const overlay = document.getElementById('clubdata-loading-overlay');
    if (overlay) {
        overlay.remove();
        console.log('Backend loading overlay hidden');
    }
}

/**
 * Utility function to safely query elements
 * Provides error handling for DOM queries
 * 
 * @param {string} selector - CSS selector string
 * @param {Element} context - Optional context element (default: document)
 * @returns {NodeList|null} - Found elements or null if error
 */
function safeQuerySelector(selector, context = document) {
    try {
        return context.querySelectorAll(selector);
    } catch (error) {
        console.error('Invalid selector:', selector, error);
        return null;
    }
}

// Hide overlay when page loads (in case of page refresh/redirect after form submission)
window.addEventListener('load', function() {
    hideLoadingOverlay();
});

// Also hide overlay if page becomes visible again (e.g., browser tab switch)
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        hideLoadingOverlay();
    }
});

// Export functions for potential module usage (if needed in the future)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        backendHelperSelect,
        beprint,
        initializeBackendFormHelpers,
        initializeBackendSelectHelpers,
        reinitializeBackendFormHelpers,
        autoSubmitForm,
        showLoadingOverlay,
        hideLoadingOverlay
    };
}
