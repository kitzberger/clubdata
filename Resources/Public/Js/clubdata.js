/**
 * ClubData JavaScript Module - Modern Vanilla JS Implementation
 * Handles category navigation, form interactions, and printing functionality
 * for the TYPO3 Clubdata extension
 * 
 * @author Generated by WARP AI Assistant
 * @version 2.0 (jQuery-free)
 */

'use strict';

/**
 * DOM Content Loaded Event Handler
 * Initializes all event listeners when the DOM is ready
 */
document.addEventListener('DOMContentLoaded', function() {
    initializeCategoryNavigation();
    initializeFormHelpers();
});

/**
 * Initialize Category Navigation Toggle
 * Sets up click handlers for category navigation icons to show/hide navigation menus
 */
function initializeCategoryNavigation() {
    // Find all category navigation icons
    const catNavIcons = document.querySelectorAll('.cat-nav-icon');
    
    catNavIcons.forEach(function(icon) {
        icon.addEventListener('click', function() {
            // Find the corresponding navigation menu
            const catNav = document.querySelector('.cat-nav');
            
            if (catNav) {
                // Toggle visibility of the navigation menu
                const isHidden = catNav.style.display === 'none' || 
                               window.getComputedStyle(catNav).display === 'none';
                
                catNav.style.display = isHidden ? 'block' : 'none';
                
                // Toggle icon classes for visual feedback (up/down arrow)
                if (icon.classList.contains('down')) {
                    icon.classList.remove('down');
                    icon.classList.add('up');
                } else {
                    icon.classList.remove('up');
                    icon.classList.add('down');
                }
            }
        });
    });
}

/**
 * Initialize Form Helper Event Listeners
 * Automatically attaches event listeners to checkboxes and select elements
 * This replaces inline onclick/onchange handlers for CSP compliance
 */
function initializeFormHelpers() {
    // Initialize checkbox helpers
    initializeCheckboxHelpers();
    
    // Initialize select helpers
    initializeSelectHelpers();
    
    console.log('Form helpers initialized successfully');
}

/**
 * Initialize checkbox event listeners for helper functionality
 * Finds all checkboxes with names containing 'ps[]' and attaches click handlers
 */
function initializeCheckboxHelpers() {
    // Find all checkboxes that are part of the helper system (not already initialized)
    const helperCheckboxes = document.querySelectorAll(
        'input[type="checkbox"][name*="ps[]"]:not([data-helper-initialized])'
    );
    
    helperCheckboxes.forEach(function(checkbox) {
        checkbox.addEventListener('click', function() {
            helperclick(this);
        });
        // Mark as initialized to prevent duplicate listeners
        checkbox.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Initialized ${helperCheckboxes.length} helper checkboxes`);
}

/**
 * Initialize select element event listeners for helper functionality
 * Finds all select elements with names containing 'ps[]' and attaches change handlers
 */
function initializeSelectHelpers() {
    // Find all select elements that are part of the helper system (not already initialized)
    const helperSelects = document.querySelectorAll(
        'select[name*="ps[]"]:not([data-helper-initialized])'
    );
    
    helperSelects.forEach(function(select) {
        select.addEventListener('change', function() {
            helperselect(this);
        });
        // Mark as initialized to prevent duplicate listeners
        select.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Initialized ${helperSelects.length} helper select elements`);
}

/**
 * Handle checkbox interactions for form elements
 * Manages checkbox state changes and automatically triggers form submission
 * 
 * @param {HTMLInputElement} element - The checkbox element that was clicked
 */
function helperclick(element) {
    if (!element || element.type !== 'checkbox') {
        console.warn('helperclick: Invalid element provided');
        return;
    }
    
    if (element.checked) {
        // Checkbox is checked - no additional action needed
        console.log('Checkbox checked:', element.name);
    } else {
        // Checkbox is unchecked - create hidden input for deletion tracking
        const elementClass = element.className;
        const elementName = element.name;
        
        // Create hidden input to track the unchecked state
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = elementName;
        hiddenInput.value = element.value + '-d'; // -d suffix indicates deletion
        
        // Insert the hidden input after the checkbox
        element.parentNode.insertBefore(hiddenInput, element.nextSibling);
    }
    
    // Modify the checkbox value to indicate it was changed
    element.value = element.value + '-c'; // -c suffix indicates changed
    
    // Trigger form submission by clicking the save button
    const saveButton = document.getElementById('save');
    if (saveButton) {
        saveButton.click();
    } else {
        console.warn('Save button not found - form not submitted automatically');
    }
}

/**
 * Handle select dropdown interactions
 * Manages dropdown value changes and modifies options dynamically
 * 
 * @param {HTMLSelectElement} element - The select element that was changed
 */
function helperselect(element) {
    if (!element || element.tagName !== 'SELECT') {
        console.warn('helperselect: Invalid select element provided');
        return;
    }
    
    // Get the currently selected option
    const selectedOption = element.options[element.selectedIndex];
    const selectedText = selectedOption ? selectedOption.textContent : '';
    
    let newValue;
    
    if (element.value !== '') {
        // Option has a value - append change indicator
        newValue = element.value + '-c'; // -c suffix indicates changed
    } else {
        // Option has no value - use class name with deletion indicator
        const elementClass = element.className;
        newValue = elementClass + '-d'; // -d suffix indicates deletion
    }
    
    // Remove the currently selected option
    if (selectedOption) {
        selectedOption.remove();
    }
    
    // Create new option with modified value and prepend it to the select
    const newOption = document.createElement('option');
    newOption.value = newValue;
    newOption.textContent = selectedText;
    newOption.selected = true;
    
    // Insert the new option at the beginning of the select
    element.insertBefore(newOption, element.firstChild);
    
    console.log('Select option modified:', {
        originalValue: element.value,
        newValue: newValue,
        text: selectedText
    });
}

/**
 * Print functionality for frame-based layouts
 * Focuses and prints a specific frame (legacy functionality for older TYPO3 backends)
 * 
 * @param {string} frameId - The identifier of the frame to print (currently unused)
 */
function beprint(frameId) {
    try {
        // Check if we're in a frame-based environment
        if (parent && parent.frames && parent.frames.list_frame) {
            // Focus the target frame (required for Internet Explorer compatibility)
            parent.frames.list_frame.focus();
            
            // Print the focused frame
            parent.frames.list_frame.print();
            
            console.log('Print command sent to list_frame');
        } else {
            // Fallback: print the current window if frames are not available
            window.print();
            console.log('Frames not available, printing current window');
        }
    } catch (error) {
        console.error('Print operation failed:', error);
        // Final fallback
        window.print();
    }
}

/**
 * Utility function to safely query elements
 * Provides error handling for DOM queries
 * 
 * @param {string} selector - CSS selector string
 * @param {Element} context - Optional context element (default: document)
 * @returns {NodeList|null} - Found elements or null if error
 */
function safeQuerySelector(selector, context = document) {
    try {
        return context.querySelectorAll(selector);
    } catch (error) {
        console.error('Invalid selector:', selector, error);
        return null;
    }
}

/**
 * Reinitialize Form Helpers for Dynamic Content
 * Call this function after loading content via AJAX or DOM manipulation
 * to ensure new form elements have proper event listeners
 * 
 * @param {Element} container - Optional container element to search within
 */
function reinitializeFormHelpers(container = document) {
    // Remove existing listeners to avoid duplicates (if any)
    // Note: This is a simplified approach - for production, you might want
    // to track listeners more precisely
    
    // Initialize helpers within the specified container
    const helperCheckboxes = container.querySelectorAll(
        'input[type="checkbox"][name*="ps[]"]:not([data-helper-initialized])'
    );
    
    helperCheckboxes.forEach(function(checkbox) {
        checkbox.addEventListener('click', function() {
            helperclick(this);
        });
        checkbox.setAttribute('data-helper-initialized', 'true');
    });
    
    const helperSelects = container.querySelectorAll(
        'select[name*="ps[]"]:not([data-helper-initialized])'
    );
    
    helperSelects.forEach(function(select) {
        select.addEventListener('change', function() {
            helperselect(this);
        });
        select.setAttribute('data-helper-initialized', 'true');
    });
    
    console.log(`Reinitialized ${helperCheckboxes.length} checkboxes and ${helperSelects.length} selects`);
}

// Export functions for potential module usage (if needed in the future)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        helperclick,
        helperselect,
        beprint,
        initializeCategoryNavigation,
        initializeFormHelpers,
        initializeCheckboxHelpers,
        initializeSelectHelpers,
        reinitializeFormHelpers
    };
}
